/* Name   : BasicTest.cpp
 * Purpose:
 * Contacts: mmaygli@gmail.com
 *
 * History:
 * 01.10.2021 - Maygli - Creation of the file
 *
 * You can use this file as you want.
 * Link to author is welcome but don't required
 */
#include <QTest>
#include "BasicTest.h"
#include "../MultiPartParserLib/mpp_parser.h"

class TestData{
public:
  enum DataType {DT_HEADER_NAME, DT_HEADER_VALUE,DT_PARAM_NAME,DT_PARAM_VALUE,DT_DATA};
public:
  TestData(){
  }

  void setHeaderName( const QString& theName){
      QPair<QString,int> aData = QPair<QString,int>(theName, DT_HEADER_NAME);
      m_Received.append(aData);
  }

  void setHeaderValue(const QString& theValue){
    QPair<QString,int> aData = QPair<QString,int>(theValue, DT_HEADER_VALUE);
    m_Received.append(aData);
  }

  void setParameterName( const QString& theName){
      QPair<QString,int> aData = QPair<QString,int>(theName, DT_PARAM_NAME);
      m_Received.append(aData);
  }

  void setParameterValue(const QString& theValue){
    QPair<QString,int> aData = QPair<QString,int>(theValue, DT_PARAM_VALUE);
    m_Received.append(aData);
  }

  void setData(const QString& theValue){
    QPair<QString,int> aData = QPair<QString,int>(theValue, DT_DATA);
    m_Received.append(aData);
  }

  QList<QPair<QString,int>> getReceived() const{
    return m_Received;
  }

  void clear(){
    m_Received.clear();
  }
protected:
  QList<QPair<QString,int>>  m_Received;
};

int read_header_value(char* theBuffer, int theLen, void* theContext)
{
  char aRes[256];
  strncpy(aRes,theBuffer,theLen);
  aRes[theLen] = 0;
  TestData* aData = (TestData*)theContext;
  aData->setHeaderValue(QString::fromLocal8Bit(aRes));
  return 0;
}

int read_header_name(char* theBuffer, int theLen, void* theContext)
{
  char aRes[256];
  strncpy(aRes,theBuffer,theLen);
  aRes[theLen] = 0;
  TestData* aData = (TestData*)theContext;
  aData->setHeaderName(QString::fromLocal8Bit(aRes));
  return 0;
}

int read_header_parameter_name(char* theBuffer, int theLen, void* theContext)
{
  char aRes[256];
  strncpy(aRes,theBuffer,theLen);
  aRes[theLen] = 0;
  TestData* aData = (TestData*)theContext;
  aData->setParameterName(QString::fromLocal8Bit(aRes));
  return 0;
}

int read_header_parameter_value(char* theBuffer, int theLen, void* theContext)
{
  char aRes[256];
  strncpy(aRes,theBuffer,theLen);
  aRes[theLen] = 0;
  TestData* aData = (TestData*)theContext;
  aData->setParameterValue(QString::fromLocal8Bit(aRes));
  return 0;
}

int read_data_part(char* theBuffer, int theLen, void* theContext)
{
  char aRes[8192];
  strncpy(aRes,theBuffer,theLen);
  aRes[theLen] = 0;
  TestData* aData = (TestData*)theContext;
  aData->setData(QString::fromLocal8Bit(aRes));
  return 0;
}

BasicTest::BasicTest(QObject *parent) : QObject(parent)
{

}

void BasicTest::testGetBound()
{
  int aSize;
  char aContent[] = "multipart/form-data; boundary=------WebKitFormBoundary8c37llwu9ngw3O2s";
  char* aBoundary = MPP_GetBoundary(aContent,&aSize);
  aBoundary[aSize] = 0;
  QCOMPARE(aSize,40);
  QString aBoundStr = QString::fromLocal8Bit(aBoundary);
  QCOMPARE(aBoundStr, QString("------WebKitFormBoundary8c37llwu9ngw3O2s"));

  char aContent1[] = "multipart/form-data; boundary=---------------------------7e524117440a4e";
  char* aBoundary1 = MPP_GetBoundary(aContent1,&aSize);
  aBoundary1[aSize] = 0;
  QCOMPARE(aSize,41);
  QString aBoundStr1 = QString::fromLocal8Bit(aBoundary1);
  QCOMPARE(aBoundStr1, QString("---------------------------7e524117440a4e"));
}

void BasicTest::testParsingBinary()
{
//Generated by Chrome
  int aSize;
  char aContent[] = "multipart/form-data; boundary=----WebKitFormBoundaryolN4J60osWqzQn9c";
  char* aBoundary = MPP_GetBoundary(aContent,&aSize);
  aBoundary[aSize] = 0;
  char aData[] = "------WebKitFormBoundaryolN4J60osWqzQn9c\r\n\
Content-Disposition: form-data; name=\"clear\"\r\n\
\r\n\
true\r\n\
------WebKitFormBoundaryolN4J60osWqzQn9c\r\n\
Content-Disposition: form-data; name=\"file\"; filename=\"test.bin\"\r\n\
Content-Type: application/octet-stream\r\n\
\r\n\
12\r\n\
------WebKitFormBoundaryolN4J60osWqzQn9c--\r\n\
";
  MultipartProcessor aProc;
  TestData  aTestData;
  MPP_MultiPartInit(&aProc,aBoundary,aSize);
  aProc.m_CBContext = (void*)&aTestData;
  aProc.cb_HeaderName = &read_header_name;
  aProc.cb_HeaderValue = &read_header_value;
  aProc.cb_HeaderParameterName = &read_header_parameter_name;
  aProc.cb_HeaderParameterValue = &read_header_parameter_value;
  aProc.cb_DataPart = &read_data_part;
  int aRes = MPP_MultiPartProcess(&aProc,aData,strlen(aData));
  QCOMPARE(aRes,0);
  QList<QPair<QString,int>> aReceived = aTestData.getReceived();
  QCOMPARE(aReceived.size(),14);
  QCOMPARE(aReceived[0].first,QString("Content-Disposition"));
  QCOMPARE(aReceived[0].second,TestData::DT_HEADER_NAME);
  QCOMPARE(aReceived[1].first,QString("form-data"));
  QCOMPARE(aReceived[1].second,TestData::DT_HEADER_VALUE);
  QCOMPARE(aReceived[2].first,QString("name"));
  QCOMPARE(aReceived[2].second,TestData::DT_PARAM_NAME);
  QCOMPARE(aReceived[3].first,QString("clear"));
  QCOMPARE(aReceived[3].second,TestData::DT_PARAM_VALUE);
  QCOMPARE(aReceived[4].first,QString("true"));
  QCOMPARE(aReceived[4].second,TestData::DT_DATA);
  QCOMPARE(aReceived[5].first,QString("Content-Disposition"));
  QCOMPARE(aReceived[5].second,TestData::DT_HEADER_NAME);
  QCOMPARE(aReceived[6].first,QString("form-data"));
  QCOMPARE(aReceived[6].second,TestData::DT_HEADER_VALUE);
  QCOMPARE(aReceived[7].first,QString("name"));
  QCOMPARE(aReceived[7].second,TestData::DT_PARAM_NAME);
  QCOMPARE(aReceived[8].first,QString("file"));
  QCOMPARE(aReceived[8].second,TestData::DT_PARAM_VALUE);
  QCOMPARE(aReceived[9].first,QString("filename"));
  QCOMPARE(aReceived[9].second,TestData::DT_PARAM_NAME);
  QCOMPARE(aReceived[10].first,QString("test.bin"));
  QCOMPARE(aReceived[10].second,TestData::DT_PARAM_VALUE);
  QCOMPARE(aReceived[11].first,QString("Content-Type"));
  QCOMPARE(aReceived[11].second,TestData::DT_HEADER_NAME);
  QCOMPARE(aReceived[12].first,QString("application/octet-stream"));
  QCOMPARE(aReceived[12].second,TestData::DT_HEADER_VALUE);
  QCOMPARE(aReceived[13].first,QString("12"));
  QCOMPARE(aReceived[13].second,TestData::DT_DATA);
}

void BasicTest::testParsingText()
{
//Generated by Edge
  int aSize;
  char aContent[] = "multipart/form-data; boundary=---------------------------7e522c20308dc";
  char* aBoundary = MPP_GetBoundary(aContent,&aSize);
  aBoundary[aSize] = 0;
  char aData[] = "-----------------------------7e522c20308dc\r\n\
Content-Disposition: form-data; name=\"clear\"\r\n\
\r\n\
true\r\n\
-----------------------------7e522c20308dc\r\n\
Content-Disposition: form-data; name=\"file\"; filename=\"test.txt\"\r\n\
Content-Type: text/plain\r\n\
\r\n\
first string\r\n\
second string\r\n\
third string\r\n\
-----------------------------7e522c20308dc--";
  MultipartProcessor aProc;
  TestData  aTestData;
  MPP_MultiPartInit(&aProc,aBoundary,aSize);
  aProc.m_CBContext = (void*)&aTestData;
  aProc.cb_HeaderName = &read_header_name;
  aProc.cb_HeaderValue = &read_header_value;
  aProc.cb_HeaderParameterName = &read_header_parameter_name;
  aProc.cb_HeaderParameterValue = &read_header_parameter_value;
  aProc.cb_DataPart = &read_data_part;
  int aRes = MPP_MultiPartProcess(&aProc,aData,strlen(aData));
  QCOMPARE(aRes,0);
  QList<QPair<QString,int>> aReceived = aTestData.getReceived();
  QCOMPARE(aReceived.size(),14);
  QCOMPARE(aReceived[0].first,QString("Content-Disposition"));
  QCOMPARE(aReceived[0].second,TestData::DT_HEADER_NAME);
  QCOMPARE(aReceived[1].first,QString("form-data"));
  QCOMPARE(aReceived[1].second,TestData::DT_HEADER_VALUE);
  QCOMPARE(aReceived[2].first,QString("name"));
  QCOMPARE(aReceived[2].second,TestData::DT_PARAM_NAME);
  QCOMPARE(aReceived[3].first,QString("clear"));
  QCOMPARE(aReceived[3].second,TestData::DT_PARAM_VALUE);
  QCOMPARE(aReceived[4].first,QString("true"));
  QCOMPARE(aReceived[4].second,TestData::DT_DATA);
  QCOMPARE(aReceived[5].first,QString("Content-Disposition"));
  QCOMPARE(aReceived[5].second,TestData::DT_HEADER_NAME);
  QCOMPARE(aReceived[6].first,QString("form-data"));
  QCOMPARE(aReceived[6].second,TestData::DT_HEADER_VALUE);
  QCOMPARE(aReceived[7].first,QString("name"));
  QCOMPARE(aReceived[7].second,TestData::DT_PARAM_NAME);
  QCOMPARE(aReceived[8].first,QString("file"));
  QCOMPARE(aReceived[8].second,TestData::DT_PARAM_VALUE);
  QCOMPARE(aReceived[9].first,QString("filename"));
  QCOMPARE(aReceived[9].second,TestData::DT_PARAM_NAME);
  QCOMPARE(aReceived[10].first,QString("test.txt"));
  QCOMPARE(aReceived[10].second,TestData::DT_PARAM_VALUE);
  QCOMPARE(aReceived[11].first,QString("Content-Type"));
  QCOMPARE(aReceived[11].second,TestData::DT_HEADER_NAME);
  QCOMPARE(aReceived[12].first,QString("text/plain"));
  QCOMPARE(aReceived[12].second,TestData::DT_HEADER_VALUE);
  QCOMPARE(aReceived[13].first,QString("first string\r\nsecond string\r\nthird string"));
  QCOMPARE(aReceived[13].second,TestData::DT_DATA);
}

void BasicTest::testMultiChunk()
{
  int aSize;
  char aContent[] = "multipart/form-data; boundary=----WebKitFormBoundaryYVzrHBnktBr3eMEN";
  char* aBoundary = MPP_GetBoundary(aContent,&aSize);
  aBoundary[aSize] = 0;
  char aData[] = "------WebKitFormBoundaryYVzrHBnktBr3eMEN\r\n\
Content-Disposition: form-data; name=\"clear\"\r\n\
\r\n\
true\r\n\
------WebKitFormBoundaryYVzrHBnktBr3eMEN\r\n\
Content-Disposition: form-data; name=\"file\"; filename=\"BasicTest.cpp\"\r\n\
Content-Type: text/plain\r\n\
\r\n\
/* Name   : HttpParserTest.cpp\r\n\
 * Purpose:\r\n\
 * Contacts: mmaygli@gmail.com\r\n\
 *\r\n\
\r\n\
      BasicTest::B";

  MultipartProcessor aProc;
  TestData  aTestData;
  MPP_MultiPartInit(&aProc,aBoundary,aSize);
  aProc.m_CBContext = (void*)&aTestData;
  aProc.cb_HeaderName = &read_header_name;
  aProc.cb_HeaderValue = &read_header_value;
  aProc.cb_HeaderParameterName = &read_header_parameter_name;
  aProc.cb_HeaderParameterValue = &read_header_parameter_value;
  aProc.cb_DataPart = &read_data_part;
  int aRes = MPP_MultiPartProcess(&aProc,aData,strlen(aData));
  QCOMPARE(aRes,0);
  char aData2[] = "asicTest(QObject *parent) : QObject(parent)\r\n\
------WebKitFormBoundaryYVzrHBnktBr3eMEN--";
  aRes = MPP_MultiPartProcess(&aProc,aData2,strlen(aData2));
  QCOMPARE(aRes,0);
  QList<QPair<QString,int>> aReceived = aTestData.getReceived();
  QCOMPARE(aReceived.size(),15);
      QCOMPARE(aReceived[0].first,QString("Content-Disposition"));
      QCOMPARE(aReceived[0].second,TestData::DT_HEADER_NAME);
      QCOMPARE(aReceived[1].first,QString("form-data"));
      QCOMPARE(aReceived[1].second,TestData::DT_HEADER_VALUE);
      QCOMPARE(aReceived[2].first,QString("name"));
      QCOMPARE(aReceived[2].second,TestData::DT_PARAM_NAME);
      QCOMPARE(aReceived[3].first,QString("clear"));
      QCOMPARE(aReceived[3].second,TestData::DT_PARAM_VALUE);
      QCOMPARE(aReceived[4].first,QString("true"));
      QCOMPARE(aReceived[4].second,TestData::DT_DATA);
      QCOMPARE(aReceived[5].first,QString("Content-Disposition"));
      QCOMPARE(aReceived[5].second,TestData::DT_HEADER_NAME);
      QCOMPARE(aReceived[6].first,QString("form-data"));
      QCOMPARE(aReceived[6].second,TestData::DT_HEADER_VALUE);
      QCOMPARE(aReceived[7].first,QString("name"));
      QCOMPARE(aReceived[7].second,TestData::DT_PARAM_NAME);
      QCOMPARE(aReceived[8].first,QString("file"));
      QCOMPARE(aReceived[8].second,TestData::DT_PARAM_VALUE);
      QCOMPARE(aReceived[9].first,QString("filename"));
      QCOMPARE(aReceived[9].second,TestData::DT_PARAM_NAME);
      QCOMPARE(aReceived[10].first,QString("BasicTest.cpp"));
      QCOMPARE(aReceived[10].second,TestData::DT_PARAM_VALUE);
      QCOMPARE(aReceived[11].first,QString("Content-Type"));
      QCOMPARE(aReceived[11].second,TestData::DT_HEADER_NAME);
      QCOMPARE(aReceived[12].first,QString("text/plain"));
      QCOMPARE(aReceived[12].second,TestData::DT_HEADER_VALUE);
      QString aFirstChunk = QString("/* Name   : HttpParserTest.cpp\r\n * Purpose:\r\n * Contacts: mmaygli@gmail.com\r\n *\r\n\r\n      BasicTest::B");
      QCOMPARE(aReceived[13].first,aFirstChunk);
      QCOMPARE(aReceived[13].second,TestData::DT_DATA);
      QCOMPARE(aReceived[14].first,QString("asicTest(QObject *parent) : QObject(parent)"));
      QCOMPARE(aReceived[14].second,TestData::DT_DATA);
}
